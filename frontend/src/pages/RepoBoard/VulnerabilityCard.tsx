import { useState, useMemo, FC } from 'react'
import { styled } from '@mui/material/styles'
import {
    Box,
    CardHeader,
    CardContent,
    CardActions,
    Collapse,
    IconButton,
    ListItem,
    ListItemText,
    Typography,
    TextField,
} from '@mui/material'

import ExpandMoreIcon from '@mui/icons-material/ExpandMore'
import ArrowRightAltIcon from '@mui/icons-material/ArrowRightAlt'
import EditIcon from '@mui/icons-material/Edit'
import CheckCircleIcon from '@mui/icons-material/CheckCircle'
import CloseIcon from '@mui/icons-material/Close'
import DeleteIcon from '@mui/icons-material/Delete'
import moment from 'moment'

import { Card as CardModel } from 'models/card'
import { ListStatus } from 'models/repo'
import {
    addCard,
    deleteCard,
    moveCard,
    updateCard,
} from 'store/board/middleware'
import { useDispatch } from 'react-redux'
import { CONFIRM_DELETE_REPO_MESSAGE } from 'constants/message'
import { DATE_TIME_FORMAT } from 'constants/format'

import { StyledCard, StyledModal, Backdrop, Note } from './styles'

const ExpandMore = styled((props: any) => {
    const { expand, ...other } = props
    return <IconButton {...other} />
})(({ theme, expand }) => ({
    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',
    marginLeft: 'auto',
    transition: theme.transitions.create('transform', {
        duration: theme.transitions.duration.shortest,
    }),
}))

interface VulnerabilityCardProps {
    item?: CardModel
    status?: string
    listId?: string
    onCancel?: () => void
}

const style = {
    width: 300,
    bgcolor: 'background.paper',
    p: 2,
    px: 4,
    pb: 3,
}

const moveAccept: Record<string, string[]> = {
    [ListStatus.Open]: [
        ListStatus.Confirmed,
        ListStatus.FalsePositive,
        ListStatus.Fixed,
    ],
    [ListStatus.Confirmed]: [ListStatus.Fixed],
}

export const VulnerabilityCard: FC<VulnerabilityCardProps> = ({
    item = {
        text: '',
    },
    status = '',
    listId = '',
    onCancel,
}) => {
    const dispatch = useDispatch()
    const [expanded, setExpanded] = useState(false)
    const [openModal, setOpenModal] = useState(false)
    const [isEdit, setIsEdit] = useState(item?.id ? false : true)
    const [text, setText] = useState(item?.text)
    const [note, setNote] = useState(item?.note)

    const isMoveAble = useMemo(() => {
        return !!moveAccept[status]
    }, [status])

    const handleExpandClick = () => {
        setExpanded(!expanded)
    }

    const handleOpenModal = () => {
        setOpenModal(true)
    }

    const handleCloseModal = () => {
        setOpenModal(false)
    }

    const onChangeText = (e: React.ChangeEvent<HTMLInputElement>) => {
        setText(e.target.value)
    }

    const onChangeNote = (e: React.ChangeEvent<HTMLInputElement>) => {
        setNote(e.target.value)
    }

    const onSaveEdit = () => {
        if (item.id) {
            dispatch(
                updateCard({
                    id: item.id,
                    text,
                    note,
                })
            )
            toggleEdit()
            return
        }
        // on add new item
        dispatch(
            addCard({
                listId,
                card: {
                    text,
                    note,
                },
            })
        )
        onCancelEdit()
    }

    const onCancelEdit = () => {
        if (!item.id) {
            if (typeof onCancel === 'function') {
                onCancel()
            }
            return
        }
        setText(item.text)
        toggleEdit()
    }
    const toggleEdit = () => {
        setIsEdit(!isEdit)
    }

    const onDelete = () => {
        // eslint-disable-next-line no-restricted-globals
        const shouldDelete = confirm(CONFIRM_DELETE_REPO_MESSAGE)
        if (shouldDelete && item.id) {
            dispatch(deleteCard(item.id))
        }
    }

    const moveToTitle = (title: string) => {
        dispatch(
            moveCard({
                title,
                cardId: item.id || '',
            })
        )
    }

    function renderAction() {
        if (isEdit) {
            return (
                <>
                    <IconButton onClick={onSaveEdit}>
                        <CheckCircleIcon color="primary" />
                    </IconButton>
                    <IconButton onClick={onCancelEdit}>
                        <CloseIcon />
                    </IconButton>
                </>
            )
        }
        return (
            <>
                <IconButton onClick={toggleEdit}>
                    <EditIcon color="primary" />
                </IconButton>
                <IconButton onClick={onDelete}>
                    <DeleteIcon color="error" />
                </IconButton>
                {isMoveAble ? (
                    <IconButton aria-label="settings" onClick={handleOpenModal}>
                        <ArrowRightAltIcon />
                    </IconButton>
                ) : null}
            </>
        )
    }

    return (
        <StyledCard variant="outlined">
            <CardHeader action={renderAction()} />
            <CardContent>
                {isEdit ? (
                    <>
                        <TextField
                            id="outlined-basic"
                            label="name"
                            variant="outlined"
                            value={text}
                            onChange={onChangeText}
                        />
                        <Note
                            label="note"
                            variant="outlined"
                            value={note}
                            onChange={onChangeNote}
                            multiline
                            rows={4}
                        />
                    </>
                ) : (
                    <>
                        <Typography paragraph>{item.text}</Typography>
                        <i>Note: {item.note}</i>
                    </>
                )}
            </CardContent>
            {!isEdit && (
                <CardActions disableSpacing>
                    <ExpandMore
                        expand={expanded}
                        onClick={handleExpandClick}
                        aria-expanded={expanded}
                        aria-label="show more"
                    >
                        <ExpandMoreIcon />
                    </ExpandMore>
                </CardActions>
            )}

            {!isEdit && (
                <Collapse in={expanded} timeout="auto" unmountOnExit>
                    <CardContent>
                        {item?.activities?.map((activity, index) => (
                            <p key={index}>
                                <Typography fontSize="9">
                                    <small>
                                        <i>
                                            {moment(activity.createdAt).format(
                                                DATE_TIME_FORMAT
                                            )}
                                            :
                                        </i>
                                    </small>
                                </Typography>
                                <Typography paragraph>
                                    {activity.description}
                                </Typography>
                            </p>
                        ))}
                    </CardContent>
                </Collapse>
            )}
            <StyledModal
                open={openModal}
                onClose={handleCloseModal}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
                BackdropComponent={Backdrop}
            >
                <Box sx={style}>
                    <Typography
                        id="modal-modal-title"
                        variant="h6"
                        component="h2"
                    >
                        Move card to:
                    </Typography>
                    {moveAccept[status]?.map((i) => (
                        <ListItem button onClick={() => moveToTitle(i)} key={i}>
                            <ListItemText primary={i} />
                        </ListItem>
                    ))}
                </Box>
            </StyledModal>
        </StyledCard>
    )
}
